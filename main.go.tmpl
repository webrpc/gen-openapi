{{- define "main" -}}

{{- /* Options with default values. */ -}}
{{- $opts := dict -}}
{{- set $opts "title" (default .Opts.title (print (index .Services 0).Name " API")) -}}
{{- set $opts "apiVersion" (default .Opts.apiVersion "") -}}
{{- set $opts "serverUrl" (default .Opts.serverUrl "") -}}
{{- set $opts "serverDescription" (default .Opts.serverDescription "") -}}
{{- set $opts "servers" (default .Opts.servers "") -}}
{{- set $opts "securityAnnotation" (default .Opts.securityAnnotation "") -}}
{{- set $opts "securitySchemes" (default .Opts.securitySchemes "") -}}

{{- /* Print help on -help. */ -}}
{{- if exists .Opts "help" -}}
  {{- template "help" $opts -}}
  {{- exit 0 -}}
{{- end -}}

{{- /* Print help on unsupported option. */ -}}
{{- range $k, $v := .Opts }}
  {{- if not (exists $opts $k) -}}
    {{- stderrPrintf "-%v=%q is not supported target option\n\nUsage:\n" $k $v -}}
    {{- template "help" $opts -}}
    {{- exit 1 -}}
  {{- end -}}
{{- end -}}

{{- if ne .WebrpcVersion "v1" -}}
  {{- stderrPrintf "%s generator error: unsupported webrpc version %s\n" .WebrpcTarget .WebrpcVersion -}}
  {{- exit 1 -}}
{{- end -}}

{{- if not (minVersion .WebrpcGenVersion "v0.7.0") -}}
  {{- stderrPrintf "%s generator error: unsupported webrpc-gen version %s, please update\n" .WebrpcTarget .WebrpcGenVersion -}}
  {{- exit 1 -}}
{{- end -}}

{{- /* Type mapping. */ -}}
{{- $typeMap := dict }}
{{- set $typeMap "null" "null" -}}
{{- set $typeMap "any" "object" -}}
{{- set $typeMap "byte" "string" -}}
{{- set $typeMap "bool" "boolean" -}}
{{- set $typeMap "uint" "number" -}}
{{- set $typeMap "uint8" "number" -}}
{{- set $typeMap "uint16" "number" -}}
{{- set $typeMap "uint32" "number" -}}
{{- set $typeMap "uint64" "number" -}}
{{- set $typeMap "int" "number" -}}
{{- set $typeMap "int8" "number" -}}
{{- set $typeMap "int16" "number" -}}
{{- set $typeMap "int32" "number" -}}
{{- set $typeMap "int64" "number" -}}
{{- set $typeMap "float32" "number" -}}
{{- set $typeMap "float64" "number" -}}
{{- set $typeMap "string" "string" -}}
{{- set $typeMap "timestamp" "string" -}}
{{- set $typeMap "map" "object" -}}
{{- set $typeMap "[]" "array" -}}

{{- $types := .Types -}}
{{- $services := .Services -}}
{{- $webrpcErrors := .WebrpcErrors -}}
{{- $schemaErrors := .Errors -}}

# {{.SchemaName}} {{.SchemaVersion}} {{.SchemaHash}}
# --
# Code generated by webrpc-gen@{{.WebrpcGenVersion}} with {{.WebrpcTarget}} generator; DO NOT EDIT
# 
# {{.WebrpcGenCommand}}
openapi: 3.0.0
info:
  title: '{{ get $opts "title" }}'
  version: '{{ get $opts "apiVersion" }}'
{{ $serversInput := get $opts "servers" -}}
{{ if or (ne (get $opts "serverUrl") "") (ne (get $opts "serverDescription") "") -}}
  {{ if eq $serversInput "" -}}
    {{- $serversInput = (printf "%s;%s" (get $opts "serverUrl") (get $opts "serverDescription")) -}}
  {{ else }}
    {{- $serversInput = (printf "%s,%s;%s" $serversInput (get $opts "serverUrl") (get $opts "serverDescription")) -}}
  {{ end -}}
{{ end -}}
{{ if ne $serversInput "" -}}
servers:
{{- $servers := split "," $serversInput -}}
{{- range $index, $server := $servers -}}
  {{- $pairs := split ";" $server }}
  - url: '{{ index $pairs 0 }}'
    description: '{{ index $pairs 1 }}'
{{- end }}
{{- end }}
components:
  {{- if (ne (get $opts "securitySchemes") "") }}
  securitySchemes: {{ get $opts "securitySchemes" }}
  {{- end }}
  schemas:
    {{- range $_, $error := $webrpcErrors }}
    {{ template "errorType" $error }}
    {{- end -}}
    {{- range $_, $error := $schemaErrors }}
    {{ template "errorType" $error }}
    {{- end -}}
    {{- range $_, $type := $types }}
    {{template "type" dict "Type" $type "TypeMap" $typeMap }}
    {{- end -}}
    {{- range $_, $service := $services}}
    {{- range $i, $method := $service.Methods}}
    {{$service.Name}}_{{$method.Name}}_Request:
      type: object
      {{- if gt (len $method.Inputs) 0 }}
      properties:
        {{- range $_, $input := $method.Inputs}}
        {{$input.Name}}:
          {{ template "fieldType" dict "Type" $input.Type "TypeMap" $typeMap "Indent" "          " }}
        {{- end -}}
      {{- end -}}
    {{- end -}}
    {{- range $_, $method := .Methods}}
    {{$service.Name}}_{{$method.Name}}_Response:
      type: object
      {{- if gt (len $method.Outputs) 0 }}
      properties:
        {{- range $_, $output := .Outputs}}
        {{$output.Name}}:
          {{ template "fieldType" dict "Type" $output.Type "TypeMap" $typeMap "Indent" "          " }}
        {{- end -}}
        {{- end -}}
      {{- end -}}
    {{- end}}

paths:
{{- range $_, $service := .Services -}}
  {{- range $_, $method := .Methods}}
  {{- $deprecated := index $method.Annotations "deprecated" }}
  /rpc/{{$service.Name}}/{{$method.Name}}:
    post:
      operationId: {{$service.Name}}{{$method.Name}}
      tags: ["{{$service.Name}}"]
      summary: {{ if $deprecated }}{{ if $deprecated.Value }}{{printf "%q" (print "Deprecated: " $deprecated.Value)}}{{else}}"Deprecated."{{end}}{{else if gt (len $method.Comments) 0}}{{printf "%q" (index $method.Comments 0)}}{{else}}""{{end}}
      {{- if $deprecated }}
      deprecated: true
      {{- end }}
      {{- if (index $opts "securityAnnotation") }}
      {{- $annotation := trimPrefix (get $opts "securityAnnotation") "@" -}}
      {{- if (index $method.Annotations $annotation) }}
      security:
        {{- $auth := index $method.Annotations $annotation -}}
        {{- $authParts := split "," $auth.Value -}}
        {{- range $authParts }}
          - {{ . }}: []
        {{- end }}
      {{- end }}
      {{- end }}
      {{- if gt (len $method.Comments) 1 }}
      description: |
        {{- range $i, $comment := (slice $method.Comments 1) }}
        {{$comment}}
        {{- end }}
      {{- end }}
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/{{$service.Name}}_{{$method.Name}}_Request'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/{{$service.Name}}_{{$method.Name}}_Response'
        '4XX':
          description: Client error
          content:
            application/json:
              schema:
                oneOf:
                {{- range $_, $error := $webrpcErrors }}
                {{- if and (ge $error.HTTPStatus 400) (le $error.HTTPStatus 499) }}
                - $ref: '#/components/schemas/Error{{$error.Name}}'
                {{- end}}
                {{- end -}}
                {{- range $_, $error := $schemaErrors }}
                {{- if and (ge $error.HTTPStatus 400) (le $error.HTTPStatus 499) }}
                - $ref: '#/components/schemas/Error{{$error.Name}}'
                {{- end -}}
                {{- end }}
        '5XX':
          description: Server error
          content:
            application/json:
              schema:
                oneOf:
                {{- range $_, $error := $webrpcErrors }}
                {{- if and (ge $error.HTTPStatus 500) (le $error.HTTPStatus 599) }}
                - $ref: '#/components/schemas/Error{{$error.Name}}'
                {{- end}}
                {{- end -}}
                {{- range $_, $error := $schemaErrors }}
                {{- if and (ge $error.HTTPStatus 500) (le $error.HTTPStatus 599) }}
                - $ref: '#/components/schemas/Error{{$error.Name}}'
                {{- end -}}
                {{- end }}
  {{- end -}}
{{- end -}}
{{- end -}}
