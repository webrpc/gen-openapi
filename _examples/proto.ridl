webrpc = v1             # version of webrpc schema format (ridl or json)

name = example          # name of your backend app
version = v0.0.1        # version of your schema

enum Kind: uint32
  - USER
  - ADMIN

struct User
  - id: uint64
    + json = id
    + go.field.name = ID
    + go.tag.db = id

  - username: string
    + json = USERNAME
    + go.tag.db = username

  - role: string
    + go.tag.db = -

struct SearchFilter
  - q: string
  - active?: bool

struct Version
  - webrpcVersion: string
  - schemaVersion: string
  - schemaHash: string

struct ComplexType
  - meta: map<string,any>
  - metaNestedExample: map<string,map<string,uint32>>
  - namesList: []string
  - numsList: []int64
  - doubleArray: [][]string
  - listOfMaps: []map<string,uint32>
  - listOfUsers: []User
  - mapOfUsers: map<string,User>
  - user: User

struct Optional
  - name?: string
  - email?: string

service ExampleService
  @deprecated
  - Ping()
  
  @deprecated:"Use GetUserV2 instead."
  @auth:JWT
  - GetUser(header: map<string,string>, userID: uint64) => (code: uint32, user: User)
 
  # GetUserV2 returns user based on given userID.
  #
  # Replaces GetUser endpoint.
  @auth:JWT
  - GetUserV2(header: map<string,string>, userID: uint64) => (code: uint32, user: User, profilePicture: string)

  # FindUser searches for a user using the given search filter.
  #
  # The filters are q (string) and active (bool).
  @auth:JWT
  - FindUser(s: SearchFilter) => (name: string, user: User)

  # ListUsers returns all users.
  @auth:JWT
  - ListUsers() => (users: []User)

  - GetComplex() => (complex: ComplexType)  
  - GetAllOptional() => (optional: Optional)

service AdminService
  @auth:JWT
  - ListUsers() => (users: []User)

error 100 RateLimited     "too many requests"   HTTP 429
error 101 DatabaseDown    "service outage"      HTTP 503